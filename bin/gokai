#!/usr/bin/env bash

set -e
unset CDPATH

function follow_links() (
  cd -P "$(dirname -- "$1")"
  file="$PWD/$(basename -- "$1")"
  while [[ -h "$file" ]]; do
    cd -P "$(dirname -- "$file")"
    file="$(readlink -- "$file")"
    cd -P "$(dirname -- "$file")"
    file="$PWD/$(basename -- "$file")"
  done
  echo "$file"
)

PROG_NAME="$(follow_links "${BASH_SOURCE[0]}")"
BIN_DIR="$(cd "${PROG_NAME%/*}" ; pwd -P)"
OS="$(uname -s)"

if [[ $OS =~ MINGW.* || $OS =~ CYGWIN.* || $OS =~ MSYS.* ]]; then
  exec "${BIN_DIR}/gokai.bat" "$@"
fi

source "$BIN_DIR/internal/shared.sh"
export FLUTTER_ROOT="$(cd "${BIN_DIR}/.." ; pwd -P)"

BOOTSTRAP_PATH="$FLUTTER_ROOT/bin/internal/bootstrap.sh"
if [ -f "$BOOTSTRAP_PATH" ]; then
  source "$BOOTSTRAP_PATH"
fi

FLUTTER_TOOLS_DIR="$FLUTTER_ROOT/packages/flutter_tools"
GOKAI_TOOLS_DIR="$FLUTTER_ROOT/packages/gokai_tools"
SNAPSHOT_PATH="$FLUTTER_ROOT/bin/cache/gokai_tools.snapshot"
STAMP_PATH="$FLUTTER_ROOT/bin/cache/gokai_tools.stamp"
SCRIPT_PATH="$GOKAI_TOOLS_DIR/lib/executable.dart"
DART_SDK_PATH="$FLUTTER_ROOT/bin/cache/dart-sdk"

DART="$DART_SDK_PATH/bin/dart"

case "$(uname -s)" in
  MINGW* | MSYS* )
    DART="$DART.exe"
    ;;
esac

if [[ "$EUID" == "0" && ! -f /.dockerenv && "$CI" != "true" && "$BOT" != "true" && "$CONTINUOUS_INTEGRATION" != "true" ]]; then
  >&2 echo "   Woah! You appear to be trying to run gokai as root."
  >&2 echo "   We strongly recommend running the gokai tool without superuser privileges."
  >&2 echo "  /"
  >&2 echo "ðŸ“Ž"
fi

if ! hash git 2>/dev/null; then
  >&2 echo "Error: Unable to find git in your PATH."
  exit 1
fi

if [[ ! -e "$FLUTTER_ROOT/.git" ]]; then
  >&2 echo "Error: The Gokai directory is not a clone of the GitHub project."
  >&2 echo "       The gokai tool requires Git in order to operate properly;"
  >&2 echo "       to install Gokai, see the instructions at:"
  >&2 echo "       https://github.com/ExpidusOS/gokai"
  exit 1
fi

function upgrade_gokai() (
  mkdir -p "$FLUTTER_ROOT/bin/cache"

  local revision="$(cd "$FLUTTER_ROOT"; git rev-parse HEAD)"
  local compilekey="$revision:$FLUTTER_TOOL_ARGS"

  if [[ ! -f "$SNAPSHOT_PATH" || ! -s "$STAMP_PATH" || "$(cat "$STAMP_PATH")" != "$compilekey" || "$FLUTTER_TOOLS_DIR/pubspec.yaml" -nt "$FLUTTER_TOOLS_DIR/pubspec.lock" ]]; then
    _wait_for_lock

    if [[ -f "$SNAPSHOT_PATH" && -s "$STAMP_PATH" && "$(cat "$STAMP_PATH")" == "$compilekey" && "$FLUTTER_TOOLS_DIR/pubspec.yaml" -ot "$FLUTTER_TOOLS_DIR/pubspec.lock" ]]; then
      exit $?
    fi

    rm -f "$FLUTTER_ROOT/version"
    touch "$FLUTTER_ROOT/bin/cache/.dartignore"
    "$FLUTTER_ROOT/bin/internal/update_dart_sdk.sh"

    >&2 echo Building gokai tool...

    if [[ "$CI" == "true" || "$BOT" == "true" || "$CONTINUOUS_INTEGRATION" == "true" || "$CHROME_HEADLESS" == "1" ]]; then
      PUB_ENVIRONMENT="$PUB_ENVIRONMENT:flutter_bot"
    else
      export PUB_SUMMARY_ONLY=1
    fi
    export PUB_ENVIRONMENT="$PUB_ENVIRONMENT:flutter_install"
    pub_upgrade_with_retry

    SNAPSHOT_PATH_OLD="$SNAPSHOT_PATH.old"
    if [ -f "$SNAPSHOT_PATH" ]; then
      mv "$SNAPSHOT_PATH" "$SNAPSHOT_PATH_OLD"
    fi

    "$DART" --verbosity=error --disable-dart-dev $FLUTTER_TOOL_ARGS --snapshot="$SNAPSHOT_PATH" --snapshot-kind="app-jit" --packages="$GOKAI_TOOLS_DIR/.dart_tool/package_config.json" --no-enable-mirrors "$SCRIPT_PATH" > /dev/null
    echo "$compilekey" > "$STAMP_PATH"

    if [ -f "$SNAPSHOT_PATH_OLD" ]; then
      rm -f "$SNAPSHOT_PATH_OLD"
    fi
  fi
  exit $?
)

upgrade_gokai 7< "$PROG_NAME"

exec "$DART" --disable-dart-dev --packages="$GOKAI_TOOLS_DIR/.dart_tool/package_config.json" $FLUTTER_TOOL_ARGS "$SNAPSHOT_PATH" "$@"
